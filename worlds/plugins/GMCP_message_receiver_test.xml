<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="GMCP_message_receiver_test"
   author="Nick Gammon"
   id="b35ff32bccfac9d02023ad3b"
   language="Lua"
   purpose="Test OnPluginBroadcast for GMCP"
   save_state="n"
   date_written="2015-05-06 08:00:31"
   requires="4.90"
   version="1.0"
   >

</plugin>

<!--  Script  -->

<script>
<![CDATA[

require "tprint"
require "json"
require "re"
  
function getStats (what)
  result, value = CallPlugin("3e7dedbe37e44942dd46d264", "gmcpval", what)
  
  if result ~= 0 then
    ColourNote ("orange", "", "Warning: Could not get stats for " .. what)
    return nil
  end -- if
  return value
end -- getStats

function gotCharacterVitals (vitals)
  --tprint (vitals)
  
	local hp = tonumber (vitals.hp)
	local maxhp = tonumber (vitals.maxhp)
	local monhp = tonumber (vitals.monhp)
	local maxmonhp = tonumber (vitals.maxmonhp)
	local lag = tonumber (vitals.lag)
	
	--Execute("gmcpalias test(" .. hp .. "," .. lag ..")")
	
	CallPlugin ("3a023d177bc699161cab5075", "setGmcpVitals", hp, maxhp, monhp, maxmonhp, lag)
end  -- gotCharacterVitals

function ExecuteNoEcho (command)
  SetOption ("display_my_input", 0)
  Execute (command)
  SetOption ("display_my_input", 1)
end -- function

function getAffectHour(affect)
	--Note("AFF" .. affect)
	return tonumber (string.match (affect, ".*for (%d+) hours"))
end

local function startsWith(str, start)
   return str:sub(1, #start) == start
end

function gotCharacterStatus (status)
	--tprint (status)

	playername = status.character_name
	
	charclass = status.class
	charrace = status.race
	charlevel = status.level
	
	moblvl = tonumber (status.opponent_level)
	mobname = status.opponent_name
	mobhealth = tonumber (status.opponent_health)
	
	tableaffect = status.affects
	
	shapetime = nil

	if tableaffect ~= nil and startsWith(tostring(status.affects),"function") == false then
		spellstime = ""
		sanctime = ""
		
		if tableaffect["Spell: sanctuary"] ~= nil then
			sanctime = getAffectHour(tableaffect["Spell: sanctuary"])
		end
		
		if tableaffect["Spell: iron monk"] ~= nil then
			sanctime = getAffectHour(tableaffect["Spell: iron monk"])
		end
		
		if tableaffect["Racial: shapeshift"] ~= nil then
			shapetime = getAffectHour(tableaffect["Racial: shapeshift"])
		end
		
		if tableaffect["Spell: foci"] ~= nil then
			spellstime = getAffectHour(tableaffect["Spell: foci"])
		end
	end
	
	CallPlugin ("3a023d177bc699161cab5075", "setGmcpStatus", moblvl, mobname, mobhealth, sanctime, spellstime, charclass, charrace, charlevel, playername, shapetime)
end  -- gotCharacterStatus

function execScript(func, param)
	CallPlugin ("3a023d177bc699161cab5075", func, param)
end

function gotGroupieAdd (gTable)
	execScript("clearGroupList")
	
	for k, v in pairs (gTable) do 
		CallPlugin ("3a023d177bc699161cab5075", "addGroupie", v.name, tonumber(v.hp), tonumber(v.maxhp), tonumber(v.mp), tonumber(v.maxmp), tostring(v.leader), tonumber(v.align), string.upper(v.class), string.upper(v.race), tonumber(string.match(v.level, '%s*%d*')), v.position)
	end
	
	execScript("updateGMCPGroupWindow")
end  -- gotGroupieAdd

function getQuoted(value)
	local tVar = ",\"" .. value .. "\""
	return tVar
end

function gotItemRemove (msg)
	--tprint (msg)
	
	name = msg.item.name
	
	if string.match(name, "wall of thorns") then
		execScript("Note", name .. " down")
	elseif string.match(name, "a dome of stone all around") then
		execScript("Note", name .. " down")
	end

end  -- gotItemRemove


function clearNills(str)
	local retorno = ""

 	for i = 1, #str do
		local c = str:sub(i,i)
		if string.byte(c) ~= 27 then
			retorno = retorno .. c
		end
	end  

	return retorno
end

function gotItemAdd (msg)
	local location = msg.location
 	local id = msg.item.id
	local name = msg.item.name
	local type = msg.item.type

	if string.match(type, "weapon") then
		strWeapon = string.gsub(name, '.%d;%d%dm', '')
		clearStrWeapon = clearNills(strWeapon)
		scapedStrWeapon = string.gsub(clearStrWeapon, '"', '\\"')
		
		if string.match(location, "room") then
			--Note("scapedStrWeapon: " .. scapedStrWeapon)
			execScript("pickPsiWeaponOnGround", id .. "#" ..  scapedStrWeapon)
		elseif string.match(location, "inv")  then
			execScript("passPsiWeaponOwner", id .. "#" ..  scapedStrWeapon)
		end
	elseif string.match(location, "room") and string.match(name, "a blood pool") and string.match(type, "trash") then
		execScript("noticePoolCreated")
	end

end  -- gotItemAdd

function gotCharacterItemList(msg)
	loc = msg.location
	
	if loc == "inv" then
		it = msg.items
		listaItems = {}
		
		for k, v in pairs (it) do 
			tipo = v["type"]

			if tipo ~= "container" then
				nome = v["name"]
				qtde = listaItems[nome]

				if qtde then
					qtde = qtde + 1
				else
					qtde = 1
				end
				
				listaItems[nome] = qtde
			end
		end
		
		for k, v in pairs (listaItems) do 
			CallPlugin ("3a023d177bc699161cab5075", "addInventoryItem", k, v)
		end
		
		Note("Inventory list set")
	end

end

function gotRoomInfo (info)
--  tprint (info)
end  -- gotRoomInfo

function gotRoomPlayers (players)
	resultCode, idStabOn = CallPlugin ("3a023d177bc699161cab5075", "isStabingByIdOn")
	resultCode, checkRoom = CallPlugin ("3a023d177bc699161cab5075", "isCheckingRoom")	
	
	--Note("idStabOn " .. tostring(idStabOn) .. " checkRoom " .. tostring(checkRoom))
	
	if idStabOn == true then
		for k, v in pairs (players) do 
			keyNum = tonumber(k)
			
			if keyNum then
				execScript("attackById", keyNum)
			end
			
			local matchedText = string.match(v.fullname,"This Rock Wyrm is protecting her den.")
			
			if matchedText ~= nil and string.len(matchedText) > 1 then
				Execute("gt Mother Wyrm id is " .. keyNum)
			end
		end
	end
	
	if checkRoom == true then
		for k, v in pairs (players) do 
			--Note("k: " .. k)
			execScript("addRoomList", k)
		end
		
		execScript("checkRoom")
	end
	
	--tprint (players)
end  -- gotRoomPlayers

function gotWrongDirection (dir)
--  print ("Could not head: ", dir [1])
  Sound ("ding.wav")
end -- gotWrongDirection

function gotAddPlayer (mob)
	resultCode, idWalkKillOn = CallPlugin ("3a023d177bc699161cab5075", "isKillingWalkingOn")
	
	if idWalkKillOn == true then
		for k, v in pairs (mob) do 
			keyNum = tonumber(k)
		
			if keyNum then
				name = v["fullname"]
				--execScript("detectWalking", name)
				Simulate(name .. "\n")
			end
		end
	end
	
end -- gotAddPlayer

function gotRemovePlayer (which)
  tprint (which)
end -- gotRemovePlayer

function gotCharacterName (name)
  tprint (name)
end -- gotCharacterName

function gotCharacterStatusVars (status)
  -- tprint (status)
end -- gotCharacterStatusVars

function gotCharacterAfflictionsList (affs)
  tprint (affs)
end -- gotCharacterAfflictionsList

function gotCharacterAfflictionsAdd (what)
  tprint (what)
end -- gotCharacterAfflictionsAdd

function gotCharacterDefencesList (defs)
  tprint (defs)
end -- gotCharacterDefencesList

function gotCharacterDefencesAdd (add)
  tprint (add)
end -- gotCharacterDefencesAdd

function gotCharacterAfflictionsRemove (what)
  tprint (what)
end -- gotCharacterAfflictionsRemove

-- WARNING: Put handlers table AFTER the handler functions
--          Make names lower case, as we do a lower-case conversion for the lookup

handlers = {
    ["char.vitals"]           = gotCharacterVitals,
    ["char.status"]           = gotCharacterStatus,
    ["char.items.remove"]     = gotItemRemove,
    ["char.items.add"]     	  = gotItemAdd,
	["char.group.list"]       = gotGroupieAdd,
    ["char.items.list"]       = gotCharacterItemList,
    ["room.players"]            = gotRoomPlayers,
    ["room.addplayer"]        = gotAddPlayer
  } -- end of handlers
  
function OnPluginBroadcast (msg, id, name, text)
--Note("text: " .. text)

 if id == "74f8c420df7d59ad5aa66246" then  -- GMCP_handler_NJG
  
   -- pull out GMCP message, plus the data belonging to it
   message, params = string.match (text, "([%a.]+)%s+(.*)")
  
   -- no match? oops!
   if not message then
      return
   end -- if
           
   -- ensure we have an array or object
   if not string.match (params, "^[%[{]") then
      params =  "[" .. params .. "]"  -- JSON hack, make msg first element of an array.
   end -- if 
   
   -- decode it
   result = assert (json.decode (params))
   
   -- debugging
   --ColourNote ("yellow", "", "GMCP: " .. message)
   
   -- find a handler for this message type
   local handler = handlers [message:lower ()]
   
   -- warn if not found
   if not handler then
     --ColourNote ("red", "", "Warning: No handler for: " .. message)
     return
   end -- no handler
   
   -- call the handler, pass in whatever we got
   handler (result)
  end -- if GMCP message
end -- OnPluginBroadcast

]]>
</script>

</muclient>
